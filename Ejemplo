#include <mpi.h>
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 1024 // Tamaño de las matrices

int main(int argc, char* argv[]) {
    int rank, size;
    double *A = NULL, *B, *C = NULL;
    double *A_local, *C_local;
    int rows_per_process;
    double start_time, end_time;

    MPI_Init(&argc, &argv); // Inicializa MPI
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); // Identificador del proceso
    MPI_Comm_size(MPI_COMM_WORLD, &size); // Número total de procesos

    rows_per_process = N / size;
    B = malloc(N * N * sizeof(double));
    A_local = malloc(rows_per_process * N * sizeof(double));
    C_local = calloc(rows_per_process * N, sizeof(double));

    if (rank == 0) {
        A = malloc(N * N * sizeof(double));
        C = malloc(N * N * sizeof(double));
        srand(time(NULL));
        for (int i = 0; i < N * N; i++) {
            A[i] = rand() % 10;
            B[i] = rand() % 10;
        }
    }

    // Distribuir submatrices de A y matriz completa B
    MPI_Scatter(A, rows_per_process * N, MPI_DOUBLE, A_local, rows_per_process * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);
    MPI_Bcast(B, N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    MPI_Barrier(MPI_COMM_WORLD);
    start_time = MPI_Wtime();

    // Multiplicación paralela con OpenMP
    #pragma omp parallel for
    for (int i = 0; i < rows_per_process; i++) {
        for (int j = 0; j < N; j++) {
            for (int k = 0; k < N; k++) {
                C_local[i * N + j] += A_local[i * N + k] * B[k * N + j];
            }
        }
    }

    MPI_Barrier(MPI_COMM_WORLD);
    end_time = MPI_Wtime();

    // Recolección de resultados
    MPI_Gather(C_local, rows_per_process * N, MPI_DOUBLE, C, rows_per_process * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Tiempo total de ejecución: %f segundos\n", end_time - start_time);
       
    }

    // Liberación de memoria
    free(B);
    free(A_local);
    free(C_local);
    if (rank == 0) {
        free(A);
        free(C);
    }

    MPI_Finalize();
    return 0;
